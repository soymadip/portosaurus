name: Deploy to GitHub Pages

on:
  push:
    branches:
      - content
  schedule:
    - cron: "0 4,12,20 * * *"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even without version changes"
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  update-check:
    runs-on: ubuntu-latest
    if: github.repository != 'soymadip/portosaurus'
    outputs:
      changed: ${{ steps.check.outputs.changed }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Fetch & Compare Version
        id: check
        run: |
          # If triggered by push to content branch, always deploy
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Content branch change detected - deploying regardless of upstream changes"
            echo "changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if force_deploy is enabled via workflow_dispatch
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "Force deployment requested!"
            echo "changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For scheduled events (cron), check upstream for changes
          echo "Scheduled job - checking for upstream changes..."

          # Create version file in .github directory if it doesn't exist
          mkdir -p .github

          if [ ! -f .github/.version ]; then
            echo "No version file found, creating it. This appears to be the first run."
            echo "0.0.0" > .github/.version
          fi

          # Read current stored version
          stored_version=$(cat .github/.version)
          echo "Current stored version: $stored_version"

          # Get latest version from upstream
          if curl -s https://raw.githubusercontent.com/soymadip/portosaurus/code/package.json > /tmp/package.json; then

            if latest_version=$(jq -r .version < /tmp/package.json); then
              echo "Latest upstream version: $latest_version"
            else
              echo "Failed to extract version. Using default version."
              latest_version="1.0.0"
            fi
          else
            echo "Failed to fetch package.json. Using default version."
            latest_version="1.0.0"
          fi

          # Compare versions
          if [ "$latest_version" = "$stored_version" ]; then
            echo "No new update detected."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Version changed from $stored_version to $latest_version!"
            echo "$latest_version" > .github/.version.new

            # Store the update info in workflow outputs
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: update-check
    if: needs.update-check.outputs.changed == 'true'
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Compile Docs
        run: bash ./.github/compile.sh

      - name: Upload Build Artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: build

      - name: Check GitHub Pages status
        id: pages_check
        run: |
          # Check if GitHub Pages is enabled, with multiple attempts
          echo "Checking if GitHub Pages is enabled for this repository..."
          PAGES_ENABLED=false

          for i in {1..36}; do
            echo "Check attempt $i of 36..."

            PAGES_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pages)

            if ! echo "$PAGES_STATUS" | grep -q "message.*Not Found"; then
              echo "GitHub Pages is enabled! Continuing with workflow."
              PAGES_ENABLED=true
              echo "pages_enabled=true" >> $GITHUB_OUTPUT
              break
            else
              echo "GitHub Pages is not yet enabled. Waiting 5 seconds before checking again."
              echo "Please go to Settings > Pages and enable GitHub Pages (source: GitHub Actions)."

              # If this is the last attempt, stop waiting
              if [ $i -eq 35 ]; then
                echo "Maximum attempts reached. GitHub Pages is not enabled."
                echo "pages_enabled=false" >> $GITHUB_OUTPUT
                exit 1
              else
                sleep 5
              fi
            fi
          done

      - name: Deploy to GitHub Pages
        if: steps.pages_check.outputs.pages_enabled != 'false'
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: false
        env:
          # Enable debug logging
          DEBUG: "actions-deploy-pages:*"

  bump-version:
    needs: [update-check, deploy]
    if:  needs.update-check.outputs.changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Update Version
        run: |
          echo "Updating local version..."

          mv .github/.version.new .github/.version || echo "No new version file found"

          # Push version file to repo
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'

          git add .github/.version .github/workflows/deploy.yml

          # push changes
          git commit -m "Bump version" || echo "No changes to commit"

          if git push origin ${GITHUB_REF_NAME}; then
            echo "Changes pushed successfully"
          else
            echo "Failed to push changes"
            exit 1
          fi