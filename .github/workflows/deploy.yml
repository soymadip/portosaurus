name: Deploy to GitHub Pages

on:
  push:
    branches:
      - content
  schedule:
    - cron: "0 4,12,20 * * *"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment: Skip upstream checks"
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  update-check:
    runs-on: ubuntu-latest
    if: github.repository != 'soymadip/portosaurus'
    outputs:
      upstream_updated: ${{ steps.check.outputs.upstream_updated }}
      upstream_version: ${{ steps.check.outputs.upstream_version }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Fetch & Compare Version
        id: check-update
        run: |

          #----------------- Get Local Version -----------------

          if [ ! -d .github ]; then
            mkdir .github
          fi

          if [ -f .github/.version ]; then
            local_version=$(cat .github/.version)
          else
            local_version="0.0.0"
          fi

          echo "Local version: $local_version"


          #----------------- Get Upstream Version -----------------

          if ! dummy_version="$(cat .github/.dummy_version 2>/dev/null)"; then
            echo "Dummy Version file not Found"
            exit 1
          fi

          force_deploy=false

          # Check for force_deploy workflow_dispatch
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo ">>> Force deployment requested!"
            force_deploy=true

            echo "upstream_updated=true" >> $GITHUB_OUTPUT
            echo "upstream_version=$dummy_version" >> $GITHUB_OUTPUT
          fi

          # Check for push to content branch
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/content" ]]; then
            echo ">>> Content branch change detected - deploying regardless of upstream changes"
            force_deploy=true

            echo "upstream_updated=true" >> $GITHUB_OUTPUT
            echo "upstream_version=$dummy_version" >> $GITHUB_OUTPUT
          fi

          # For cron job, check upstream for changes

          echo ">>> Scheduled job - checking for upstream changes..."

          # Fetch upstream version
          echo "> Fetching package.json..."

          max_attempts=5
          attempt=1
          success=false

          while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
              echo "Attempt $attempt of $max_attempts"

              if curl -s -f https://raw.githubusercontent.com/soymadip/portosaurus/compiler/package.json > /tmp/package.json; then

                  if latest_version=$(jq -r .version < /tmp/package.json); then
                      echo "Latest upstream version: $latest_version"
                      success=true
                  else
                      echo "Failed to extract version, retrying in 5 seconds..."
                      sleep 5
                      ((attempt++))
                  fi
              else
                  echo "Failed to fetch package.json, retrying in 5 seconds..."
                  sleep 5
                  ((attempt++))
              fi
          done

          if [ "$success" = false ]; then
              echo ">>> Failed to fetch upstream version after $max_attempts attempts."
              echo "Plsase check your upstream URL or internet connection."
              exit 1
          fi

          # Compare versions
          if [ "$local_version" != "$latest_version" ]; then
              echo ">>> Upstream version has changed!"

              echo "upstream_updated=true" >> $GITHUB_OUTPUT
              echo "upstream_version=$latest_version" >> $GITHUB_OUTPUT
          else
              echo ">>> No upstream changes detected."

              if [ "$force_deploy" != true ]; then
                echo "upstream_updated=false" >> $GITHUB_OUTPUT
                echo "upstream_version=$latest_version" >> $GITHUB_OUTPUT
              fi
          fi

  deploy:
    needs: update-check
    if: needs.update-check.outputs.upstream_updated == 'true'
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: update Compiler
        run: |
          echo ">>> Updating Compiler..."

          git clone --depth 1 https://github.com/soymadip/portosaurus COMPILER || {
            echo ">> Failed to clone Compiler repository. Please check your internet connection or repository URL."
            exit 1
          }

          {
            rm -rf .github &&
            cp -r COMPILER/.github .github
          } || {
            echo ">> Failed to update compiler."
            exit 1
          }

          echo ">> Compiler updated successfully."

      - name: compile Content
        run: bash ./.github/compile.sh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifact
          path: .github/

      - name: Check GitHub Pages status
        id: pages_check
        run: |
          # Check if GitHub Pages is enabled
          echo ">>> Checking if GitHub Pages is enabled for this repository..."

          PAGES_ENABLED=false

          for i in {1..36}; do
            echo "> Check attempt $i of 36..."

            PAGES_STATUS=$(curl -s -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pages)

            if ! echo "$PAGES_STATUS" | grep -q "message.*Not Found"; then
              echo ">> GitHub Pages is enabled! Continuing with workflow."
              PAGES_ENABLED=true
              echo "pages_enabled=true" >> $GITHUB_OUTPUT
              break
            else
              echo "> GitHub Pages is not yet enabled."
              echo "Please go to Settings > Pages and enable GitHub Pages (source: GitHub Actions)."
              echo "Waiting 5 seconds before checking again."

              # If this is the last attempt, stop waiting
              if [ $i -eq 36 ]; then
                echo ">> Maximum attempts reached. GitHub Pages is not enabled."
                echo "pages_enabled=false" >> $GITHUB_OUTPUT
                exit 1
              else
                sleep 5
              fi
            fi
          done

      - name: Deploy to GitHub Pages
        if: steps.pages_check.outputs.pages_enabled != 'false'
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: false


  update-repo:
    needs: [update-check, deploy]
    if: needs.update-check.outputs.upstream_updated == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Downlaod deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifact
          path: .deployment/

      - name: Check file changes
        id: files-changed
        run: |
          # Replace deployment artifact
          rm -rf .github
          cp -r .deployment/ .github/
          rm -rf .deployment

          # check for file changes
          if git diff --quiet .github; then
            echo "> No changes in .github"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "> Changes detected in .github"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check Version change
        id: version-changed
        run: |

          dummy_version="$(cat .github/.dummy_version 2>/dev/null)"

          has_update="${ needs.update-check.outputs.upstream_updated }"
          latest_version="${{ needs.update-check.outputs.upstream_version }}"

          if [ "$has_update" == "true"] && [ "$latest_version" != "$dummy_version" ]; then
            echo ">>> Updating local version to $latest_version"

            echo "$latest_version" > .github/.version
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo ">>> No version change detected. Skipping update."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit & Push Changes
        if: steps.files-changed.outputs.changed == 'true' || steps.version-changed.outputs.changed == 'true'
        run: |

          if [ "${{ github.repository }}" == 'soymadip/soymadip.github.io' ]; then
            git config user.name 'soymadip'
            git config user.email "${{ github.actor }}@users.noreply.github.com"
          else
            git config user.name  'GitHub Actions'
            git config user.email 'actions@github.com'
          fi

          git add .github

          # push changes
          git commit -m "Sync with upstream"

          if git push origin ${GITHUB_REF_NAME}; then
            echo ">>> Changes pushed successfully"
          else
            echo ">> Failed to push changes"
            exit 1
          fi